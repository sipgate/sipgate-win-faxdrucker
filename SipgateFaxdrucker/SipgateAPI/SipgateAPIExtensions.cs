// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using Microsoft.Rest;
using SipgateFaxdrucker.SipgateAPI.Models;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace SipgateFaxdrucker.SipgateAPI
{
    /// <summary>
    /// Extension methods for SipgateAPI.
    /// </summary>
    public static partial class SipgateApiExtensions
    {
        /// <summary>
        /// Send a fax
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='body'>
        /// </param>
        public static SendFaxSessionResponse SendFax(this ISipgateApi operations, SendFaxRequest body = default)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).SendFaxAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a fax
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<SendFaxSessionResponse> SendFaxAsync(this ISipgateApi operations, SendFaxRequest body = default, CancellationToken cancellationToken = default)
        {
            try
            {
                using (HttpOperationResponse<SendFaxSessionResponse> result = await operations.SendFaxWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return new SendFaxSessionResponse(result.Body.SessionId, result.Response.StatusCode);
                }
            }
            catch (HttpOperationException hex)
            {
                return new SendFaxSessionResponse(null, hex.Response.StatusCode);
            }
            catch (Exception exception)
            {
                Utils.LogCritical("Failed to send fax: " + exception.Message);
                return new SendFaxSessionResponse(null, System.Net.HttpStatusCode.InternalServerError);
            }

        }

        /// <summary>
        /// Get information about the logged in user
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// token
        /// </param>
        public static UserinfoResponse Userinfo(this ISipgateApi operations, string authorization = default)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).UserinfoAsync(authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get information about the logged in user
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<UserinfoResponse> UserinfoAsync(this ISipgateApi operations, string authorization = default, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.UserinfoWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }

        /// <summary>
        /// List all fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='userId'>
        /// The unique user identifier
        /// </param>
        public static FaxlinesResponse GetUserFaxlines(this ISipgateApi operations, string userId)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).GetUserFaxlinesAsync(userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='userId'>
        /// The unique user identifier
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<FaxlinesResponse> GetUserFaxlinesAsync(this ISipgateApi operations, string userId, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.GetUserFaxlinesWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }

        /// <summary>
        /// Get a specific call, fax, SMS or voicemail
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='entryId'>
        /// The unique call, fax, sms or voicemail identifier
        /// </param>
        public static HistoryEntryResponse GetHistoryById(this ISipgateApi operations, string entryId)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).GetHistoryByIdAsync(entryId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a specific call, fax, SMS or voicemail
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='entryId'>
        /// The unique call, fax, sms or voicemail identifier
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<HistoryEntryResponse> GetHistoryByIdAsync(this ISipgateApi operations, string entryId, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.GetHistoryByIdWithHttpMessagesAsync(entryId, null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }

        /// <summary>
        /// List all group fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='userId'>
        /// The unique user identifier
        /// </param>
        public static GroupFaxlinesResponse GetGroupFaxlinesForUser(this ISipgateApi operations, string userId = default)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).GetGroupFaxlinesForUserAsync(userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all group fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='userId'>
        /// The unique user identifier
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<GroupFaxlinesResponse> GetGroupFaxlinesForUserAsync(this ISipgateApi operations, string userId = default, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.GetGroupFaxlinesForUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }

        /// <summary>
        /// List all fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        public static ContactsResponse GetContacts(this ISipgateApi operations, int? limit, int? offset)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).GetContactsAsync(limit, offset), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all fax lines
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name="offset"></param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <param name="limit"></param>
        public static async Task<ContactsResponse> GetContactsAsync(this ISipgateApi operations, int? limit, int? offset, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.GetContactsWithHttpMessagesAsync(limit, offset, null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }


        public static BalanceResponse Balance(this ISipgateApi operations, string authorization = default)
        {
            return Task.Factory.StartNew(s => ((ISipgateApi)s).BalanceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        public static async Task<BalanceResponse> BalanceAsync(this ISipgateApi operations, CancellationToken cancellationToken = default)
        {
            using (var result = await operations.BalanceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return result.Body;
            }
        }
    }
}
